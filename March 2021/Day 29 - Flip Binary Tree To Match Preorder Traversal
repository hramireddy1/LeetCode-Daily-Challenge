# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def flipMatchVoyage(self, root: TreeNode, voyage: List[int]) -> List[int]:
        res = []
        stack = [root]
        i = 0
        while stack:
            node = stack.pop()
            if node and node.val!=voyage[i]:
                return [-1]
            i+=1
            if node.left and node.left.val!=voyage[i]:
                res.append(node.val)
                #Changing the order of comparision in the stack
                if node.left: stack.append(node.left)
                if node.right: stack.append(node.right)
                    
            else:
                if node.right: stack.append(node.right)
                if node.left: stack.append(node.left)
                
        return res
        
        

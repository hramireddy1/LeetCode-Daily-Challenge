class Solution:
    def swimInWater(self, grid: List[List[int]]) -> int:
        n = len(grid)
        heap = [(grid[0][0], 0, 0)]
        visited = set([(0,0)])
        res = 0
        corner = False
        while not corner:
            curr, x , y = heappop(heap)
            if x==n-1 and y==n-1:
                corner = True
            res = max(res,curr)
            neighbors = [(0,-1),(0,1),(1,0),(-1,0)]
            for dx, dy in neighbors:
                if 0<=x+dx<=n-1 and 0<=y+dy<=n-1 and (x+dx,y+dy) not in visited:
                    heappush(heap, (grid[x+dx][y+dy], x+dx, y+dy))
                    visited.add((x+dx, y+dy))
        return res
        

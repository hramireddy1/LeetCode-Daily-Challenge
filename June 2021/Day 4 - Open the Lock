class Solution:
    def openLock(self, deadends: List[str], target: str) -> int:
        def neighbors(code):
            moves = (-1,1)
            for i in range(len(code)):
                x = int(code[i])
                for move in moves:
                    new_x = (x+move+10)%10
                    yield code[:i]+str(new_x)+code[i+1:]
        q = deque(["0000"])
        steps = 0
        deadset = set(deadends)
        if "0000" in deadset:
            return -1
        while q:
            for _ in range(len(q)):
                code = q.popleft()
                if code == target:
                    return steps
                for neighbor_code in neighbors(code):
                    if neighbor_code in deadset:
                        continue
                    deadset.add(neighbor_code)
                    q.append(neighbor_code)
            steps += 1
        return -1
        
